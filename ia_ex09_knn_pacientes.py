# -*- coding: utf-8 -*-
"""IA_Ex09_KNN_Pacientes (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19WyGfHWQxTt_UO4AClt4m0qYiPN3nNzl

# Treinamento

### Carregando Arquivo de Treinamento (.csv)
"""

import pandas as pd
import numpy as np 
from sklearn import preprocessing
from sklearn.neighbors import KNeighborsClassifier

# Carregando dados do arquivo CSV
url = 'https://raw.githubusercontent.com/MariaMilena/ClassificadorKNN/master/diabetes.csv'
base_Treinamento = pd.read_csv(url,sep=',', encoding = 'latin1').values
print("--------------------------------------------------------")
print("Dados dos Pacientes - TREINAMENTO - Dimensão ",base_Treinamento)
print("--------------------------------------------------------")
print(base_Treinamento)
print("---------------------------------")

# Extração dos Atributos a serem utilizadas pela rede
print("Atributos de Entrada")
print("---------------------------------")
print(base_Treinamento[:, 1:5])

print("----------------------------")
print("Classificação Supervisionada")
print("----------------------------")
print(base_Treinamento[:, 5])

"""### Pré-processamento de Dados"""

mms = preprocessing.MinMaxScaler()
normalized_attributes = mms.fit_transform(base_Treinamento[:, :8])

print("--------------------------------")
print("Atributos de Entrada - Numéricos")
print("--------------------------------")
print(normalized_attributes)

print("----------------------------------------")
print("Classificação Supervisionada - Numéricos")
print("----------------------------------------")
diagnostico_norm = base_Treinamento[:, 8]
print(diagnostico_norm)

"""### Treinamento do KNN (K-Nearest Neighbor)"""

# Treinamento do Knn a partir dos atributos de entrada e classificações com K=3
modelo = KNeighborsClassifier(n_neighbors=15)
modelo.fit(normalized_attributes, diagnostico_norm)

# Acurácia do modelo, que é : 1 - (predições erradas / total de predições)
# Acurácia do modelo: indica uma performance geral do modelo. 
# Dentre todas as classificações, quantas o modelo classificou corretamente;
# (VP+VN)/N
print('Acurácia: %.3f' % modelo.score(normalized_attributes, diagnostico_norm))

"""### ----------------------------------------------------------------------------

# Validação do Aprendizado

### Predição Simples
"""

Luiz = [[6,148,72,35,0,33.6,0.627,50]]
print("Luiz", modelo.predict(Luiz))
Laura = [[1,89,66,23,94,28.1,0.167,21]]
print("Laura", modelo.predict(Laura))

"""### Predição a partir de base de dados (.csv)"""

# Carregando dados do arquivo CSV
url = 'https://raw.githubusercontent.com/MariaMilena/ClassificadorKNN/master/testes.csv'
base_Testes = pd.read_csv(url,sep=',', encoding = 'latin1').values
print("----------------------------")
print("Dados dos Pacientes - TESTES")
print("----------------------------")
print(base_Testes)
print("---------------------------------")

# Extração dos Atributos a serem utilizadas pela rede
print("Atributos de Entrada")
print("---------------------------------")
print(base_Testes[:, 1:5])

"""### Pré-processamento de Dados"""

normalized_attributes = mms.fit_transform(base_Treinamento[:, :8])

print("--------------------------------")
print("Atributos de Entrada - Numéricos")
print("--------------------------------")
print(normalized_attributes)

"""### Predição da Base"""

base_Predicao = modelo.predict((normalized_attributes))
print("Classificações: ", base_Predicao)